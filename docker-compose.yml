version: "3.7"

services: # the different images that will be running as containers
  proxy: # service name
    build: ./nginx # location of the dockerfile that defines the nginx image. The dockerfile will be used to spin up an image during the build stage
    ports:
      - 443:443
      - 80:80
    volumes: # static storages provisioned since django does not handle static files in production
      - static_volume:/home/app/webservice/static # provide a space for static files
    depends_on:
      - web # will only start if web is up and running
    restart: "on-failure" # restart service when it fails
  web: # service name
    build: ./backend #build the image for the web service from the dockerfile in parent directory.
    # command directive passes the parameters to the service and they will be executed by the service. In this example, these are django commands which will be executed in the container where django lives.
    command: sh -c "cd ${PROJECT_NAME} &&
                    python manage.py makemigrations &&
                    python manage.py migrate &&
                    python manage.py collectstatic --noinput &&
                    gunicorn ${PROJECT_NAME}.wsgi:application --bind 0.0.0.0:${APP_PORT}" # Django commands to run app using gunicorn
    volumes:
      - ./backend:/webservice # map data and files from parent directory in host to webservice directory in docker container
      - static_volume:/home/app/webservice/static
    env_file: # file where env variables are stored. Used as best practice so as not to expose secret keys
      - .env # name of the env file
    image: webservice # name of the image
    expose: # expose the port to other services defined here so that they can access this service via the exposed port. In the case of Django, this is 8000 by default
      - ${APP_PORT} # retrieved from the .env file
    restart: "on-failure"
    depends_on: # cannot start if db service is not up and running
      - db
  db:
    image: postgres # image name of the postgres database. during build, this will be pulled from dockerhub and a container spun up from it
    volumes:
      - ./backend/db_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    restart: "on-failure"

volumes:
  static_volume:

#.env:
#PROJECT_NAME=dj_docker_drf
#APP_PORT=8888
#POSTGRES_DB=postgres
#POSTGRES_USER=postgres
#POSTGRES_PASSWORD=postgres